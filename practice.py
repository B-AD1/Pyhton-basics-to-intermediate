# -*- coding: utf-8 -*-
"""Practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fZOLmtr1Yta7FDEPtmRpXM2FsdN83OYs
"""

a = 6
b = 10
print( not ( not a == 10 or not b == 10) )

A = 5.0
B = float(10/2)
print(A is B)
print(B)

A = 5.0
B = int(10/2)
print(A is B)
print(B)

A = 5.0
B = float(10/2)
print(A is B)

class_started = bool(input("Hey friend, is class started?:[''-False/'Any value'-True] "))

if class_started:
   print("Since class started...")
   print("Lets concentrate")
else:
   print("Since class is not started...")
   print("let's revise")

total_amount = 90 + 100 + 1000

print(f"cart total: {total_amount}")

if total_amount > 999:
  price_after_discount = total_amount * 70/100
  print(f"Pay amount: {price_after_discount}")
if 499 < total_amount <= 999: #  999 <= price < 499
  price_after_discount = total_amount * 80/100
  print(f"Pay amount: {price_after_discount}")
else:
  print(f"Pay amount: {total_amount}")

total_amount = 90 + 100 + 300 + 1000

print(f"cart total: {total_amount}")

if total_amount > 1499:
  price_after_discount = total_amount * 60/100
  print(f"Pay amount: {price_after_discount}")
if 999 < total_amount <= 1499:
  price_after_discount = total_amount * 70/100
  print(f"Pay amount: {price_after_discount}")
if 499 < total_amount <= 999: #  999 <= price < 499
  price_after_discount = total_amount * 80/100
  print(f"Pay amount: {price_after_discount}")
else:
  print(f"Pay amount: {total_amount}")

val = float(input("Enter a number: "))

print("YES" if val > 99 else "NO")

total_marks = 1000
cutoff = 400
scores = [100, 200, 300, 399, 500]

# I will keep on attempting until I succeed
year = 0 # indexing in python starts with 0

while scores[year] < cutoff:
  print(f"Your score is: {scores[year]}, cutoff: {cutoff}")
  print("I will attempt next year")
  year = year + 1 # I am adding 1 to current year
if scores[year] >= cutoff:
  print(f"Your score is: {scores[year]}, cutoff: {cutoff}")
  print('I have succeeded')

total_marks = 1000
cutoff = 400
scores = [100, 200, 300, 399, 500]

# I will keep on attempting until I succeed
year = 0 # indexing in python starts with 0

while scores[year] < cutoff:
  print(f"Your score is: {scores[year]}, cutoff: {cutoff}")
  print("I will attempt next year")
  year = year + 1 # I am adding 1 to current year
else:
  print(f"Your score is: {scores[year]}, cutoff: {cutoff}")
  print('I have succeeded')

for i in range(0, 10): # (10 here is out of bound)
  print(10*i)

'*'*'s'

name = "Sunnyrathode" # S_n_y

name[0:5:2] # start: ending: step

name = "Sunnyrathode" # S_n_y

name[0::2] # start: ending: step

name = "Sunny Bhaveen Chandra"

name[0::3]

name = "Sunny Bhaveen Chandra"

name[::3]

"""##Python Methods
- .replace( , )
- .count()
- .split()
- .lower()
- .upper()
- .title()
- .capitalize()
- .swapcase()
- " ".join()
- .strip()
- .lstrip()
- .rstrip()
- .center(L, )
- .is_() - T/F
- .startswith()
- .endswith()

List methods:
- .append()
- .pop()
- sorted()
- .sort()
- .extend()
- .remove()
- .insert(L, )
- .index()
- .count()
"""

p = "   . ,esjssss...   name"
l = p.lstrip(" ,.esj")
print(l)

txt = ",,,,,ssaaww.....banana"

x = txt.lstrip(",.asw")

print(x)

name = 'Aditya'
"".join(reversed(name))

name = input('name: ')
name.split()

name = input('name: ')
name.split()

name = input('name: ')
name.split()

name = 'Aditya B'
name.split(' ')

name = input('name: ')
name.split(' ')

name = input('name: ')
name.split(' ')

text = "Welcome to iNeuron, You are a part of FSDS Bootcamp 2 in iNeuron. I hope you are enjoying the course by iNeuron"
text.count('iNeuron')

txt = "Hell iNeuron to FSDS 2.0 at iNeuron."
Phrase = txt[5:12]
if Phrase == "iNeuron":
  print("Position '5' to '11' in the string ends with the phrase 'iNeuron'")
else:
  print("Position '5' to '11' in the string doesn't ends with the phrase 'iNeuron'")
  print(f'Phrase between those positions is "{Phrase}"')

LIST = ["My", "name", "is", "Rishav", "Dash"]
"#".join(LIST)

n = 30
if n>50:
  print('Yes')
elif n<20:
  print('Yesss')
elif n == 50:
  print('It is')

a = "d"

a == complex(a)

a = [1,1+2j,3,4+3j,5]

for i in a:
  if i == complex(i):
    print(i, a.index(i))

a = [1,2,3,4,5]
a.replace(1,2)

s = 'string'
s.replace()

a = [1,2,3,4,5]
a[0] = 0
a

a = [1,2,3,4]
a= a+[5,6,7]
a

a = [1,2,3,4]
a= a+[[5,6,7]]
a

sum=0
for i in range(6):
  sum+=i
print(sum)

a = list(input('enter: '))
 a

A = [1,2,3]

B = [11, 22, 33]

A.append(B)
A

A = [1,2,3]

B = [11, 22, 33]

A.extend(B)
A

a = list(input('enter: '))

 a

n = list(input('Number is: '))
i= 0
for m in range(len(n)+1):
  i = i + m
print(i)

.a = [1,2,3,4,5]
type(a)

type(a[1])

a = list(input())
a[0] = int(a[0])
type(a[0])

n = list(input('Number is: '))
i= 0
for m in range(len(n)+1):
  m = int(m)
  i = i + m
print(f'sum is {i}')

n=1234
n=str(n)
n

d = {'fjd' : 'asd'}

s = {1,2,3,4}
type(s[0])

n = list(input('Number is: '))
i= 0
for m in range(len(n)+1):
  i = i + m
print(f'sum is {i}')

n = set(input('Number is: '))
i= 0
for m in range(len(n)+1):
  i = i + m
print(f'sum is {i}')

l = [1,2,3,4]
l.pop(2)

l

l.index(4)

s = input()
w = input()
if w in s:
  print('YES')
  print(s.count(w))
  print(s)
else:
  print('NO')

n = int(input('n is '))
m = 1
if n > 0:
  f = n
  for i in range(n):
    if m!= 0:
      f = f*m
      m = n - (i+1)
  print(f'Factorial of {n} = {f}')

elif n < 0:
  print('f = -1')

else:
  print(1)

I = str(input('Input string is: '))
a = int(input())
b = int(input())
s = I[a:b+1]
print(f'Substring is s = {s}')
while len(s) <= len(I):
  s = s + I[a:b+1]
print(f"The nwe string is {s}")

r = 'abcde'
r[0:3]

o = 0
p = 3
q = r[o:p]
q

q + r[o:p]

r = int(input('Roll number is: '))
Sapphire = [1]
Peridot = [2]
Ruby = [3]
Emerald = [4]
m = 1
for i in range(r+1):
  m=m+4
  Sapphire.append(m)
m = 2
for i in range(r+1):
  m=m+4
  Peridot.append(m)
m = 3
for i in range(r+1):
  m=m+4
  Ruby.append(m)
m = 4
for i in range(r+1):
  m=m+4
  Emerald.append(m)
if r in Sapphire:
  print(f'Student with roll number {r} is in Sapphire')
elif r in Peridot:
  print(f'Student with roll number {r} is in Peridot')
elif r in Ruby:
  print(f'Student with roll number {r} is in Ruby')
elif r in Emerald:
  print(f'Student with roll number {r} is in Emerald')

for i in range(1,25,4):
  print(i)

n = int(input('Number of backlogs = '))
m = float(input('CGPA is: '))
if n <= 5 and m > 6:
  p = m*5
  print(f'Student is selected and the package is {p} LPA')
else:
  print('Student is not selected')

a = str(input())
b = ''.join(reversed(a))
if a == b:
  print('PALINDROME')
else:
  print('NOT PALINDROME')

a = str(input())
b = ''.join(reversed(a))
if a == b:
  print('PALINDROME')
else:
  print('NOT PALINDROME')

a = str(input())
b = str()
k = 0
for i in range(len(a)):
  k=k-1
  b = b + a[k]
if a == b:
  print('PALINDROME')
else:
  print('NOT PALINDROME')

a = str(input())
a[::-1]

p = str(input())
n = '0123456789'
v = False
for i in range(len(p)):
  if p[i] in n and i != (len(p)-1):
    if n[(n.index(p[i])+1)] == p[i+1]:
      v = True
print(v)

p = str(input())
n = '0123456789'
v = False
l = str()
for i in range(len(p)):
  if p[i] in n and i != (len(p)-1):  #to find if there is a sequence in the string
    if p[i] in n and p[i+1] in n:
      l = l+p[i]+p[i+1]
      if l in n:
        v = True
print(v)

l = list(input(''))
n = []
for i in l:
  if l.count(i)%2 != 0:
    if i not in n:
      n.append(i)
print(n)

p = l
p.pop(8)
p

l = [10,20,30,40,50,60,70,80,90,100]
i = 0
n = len(l)
while i<n:
  if l[i] > 50:
    del l[i]
    n = n-1
  else:
    i = i+1
print(l)

l = [10,20,30,40,50,60,70,80,90,100]
del l[0]
print(l)

l = [10,20,60,30,20,40,30,60,70,80]
d = []
for i in l:
  if l.count(i) > 1:
    if i not in d:
      d.append(i)
print(d)

import collections
l = [10,20,60,30,20,40,30,60,70,80]
d = []
for i, count in collections.Counter(l).items():
  if count > 1:
    d.append(i)
print(d)

def f(x,y):
  def f1(x,y):
    return (x+' '+y)

  return f1(x,y) + ' developer'

f('Emma','Kyler')

l = [1,[4,5,[23,43,[34,55],12],45,6],3]

s = 0
for i in range(10):
  r = i + s
  print(f'Sum of {i} and {s} is {r}')
  s = i

dicti = {'name':'Aditya', 'job':'none (currently in break)', 'waifus':{'anime waifus':{1:'Videl', 2:'Lucy', 3:'Lina', 4:'Hinata', 5:'Julia', 6:'Natsumi'}, 'real waifus':'none'}}

dicti['waifus']['real waifus']

dicti['job']

n = str(input('String is: '))
r = []
for i in range(0,len(n),2):
  r.append(n[i])
print(r)

for i in range(0,10,2):
  print(i)

n = str(input('String is: '))
r = []
for i in range(0,len(n),2):
  print(n[i], end=',')

import datetime
time = datetime.datetime.now()
print(time)
print(time.year)
print(time.time())

l = [1,2,3,4,5,6,7,8,9]
o = list(filter(lambda a: a%2 !=0, l))
e = list(filter(lambda a: a%2 ==0, l))
print(o, e)

def conv(x):
  for i in x:
    if x.count(i) > 1:
      del i
  l = x.lower()
  u = x.upper()
  return l, u

li = ['a','s','e','s','w']
re = map(conv, li)

print(list(re))

arr = map(int, input().split())
maxi = 0
s = 0
for i in arr:
    if i > maxi:
        s = maxi
        maxi = i
    elif s < i and i < maxi:
        s = i
print(s)

"""##List comprehensions (Single line code)"""

a = 1
b = 1
c = 1
q = 2
l = [[i,j,k] for i in range(a+1) for j in range(b+1) for k in range(c+1) if i+j+k != q]
print(l)

a = [1,2,3,4,5]

b = [i**2 for i in a if i%2==0]
print(b)

"""##Max or sencond max using Lambda"""

lst = [10, 20, 4, 45, 99]
maximum1 = max(lst)
maximum2 = max(lst, key=lambda x: min(lst)-1 if (x == maximum1) else x)
print(maximum2)

List = [[2,3,4],[1, 4, 16, 64],[3, 6, 9, 12]]

sortList = lambda x: (sorted(i) for i in x)

r = list(sortList(List))
print(r)

f = lambda l: l[0] if len(l) == 1 else l[0] if l[0] > f(l[1:]) else f(l[1:])
list = [19, 7, 17, 97, 5]
maximum = f(list)
print(maximum)

for _ in range(int(input())):
    l_ = []
    name = input()
    score = float(input())
    l_.append(name)
    l_.append(score)
    print(l_, end='\n')

n = int(input())
s = 0
k = ()
for i in range(n):
    li = []
    name = input()
    score = float(input())
    li.append(name)
    li.append(score)
if l0[1] >= l1[1] and l0[1] >= l2[1]:
    if l1[1] > l2[1]:
        s = l1[1]
        k.add(1)
    elif l1[1] == l2[1]:
        s = l1[1]
        k.add(1)
        k.add(2)
    else:
        s = l2[1]
        k.add(2)
elif l1[1] >= l0[1] and l1[1] >= l2[1]:
    if l0[1] > l2[1]:
        s = l0[1]
        k.add(0)
    elif l0[1] == l2[1]:
        s = l0[1]
        k.add(0)
        k.add(2)
    else:
        s = l2[1]
        k.add(2)
else:
    if l0[1] > l1[1]:
        s = l0[1]
        k.add(0)
    elif l0[1] == l1[1]:
        s = l0[1]
        k.add(0)
        k.add(1)
    else:
        s = l1[1]
        k.add(1)

s = 'iNeuron '
for i in range(5):

  print(s*i, end = '\n')

w = [1,2,3,1,4,5]
w.index(1)

n = int(input())
s = 0
mi = 0
na = []
sc = []
for i in range(n):
    name = input()
    score = float(input())
    na.append(name)
    sc.append(score)
mi = max(sc)
for j in sc:
  if j < mi:
    s = mi
    mi = j
  elif j > mi and j < s:
    s = j
print(s,mi)

n = 5
na = ['a', 'b', 'c', 'd', 'e']
sc = [2.5,3,2.5,1,5]
k = []
mi = max(sc)
for j in sc:
    if j < mi:
        s = mi
        mi = j
    elif j > mi and j < s:
        s = j
for q in range(n):
    if sc[q] == s:
      k.append(na[q])
print(k)
k.sort()
print(k)

n = 5
na = ['a', 'b', 'c', 'd', 'e']
sc = [2.5,3,2.5,1,5]
k = []
mi = max(sc)
for j in sc:
    if j < mi:
        s = mi
        mi = j
    elif j > mi and j < s:
        s = j
for q in range(n):
    if sc[q] == s:
      k.append(na[q])
print(k)
x = set(k)
print(x)

f = ['a','d','l']
f= set(f)
print(f)

r = ['a', 'b', 'e', 'd', 'c']

r = set(r)
r

s = ['Harry', 'Berry']
s= set(s)
s

d = ['a', 'c']
d = set(d)
d

d = ['a', 'c']
d = set(d)
print(d)

n = 5
dic = {}
for i in range(n):
    name, *key = input().split()
    score = list(map(float, key))
    dic[name] = score

dic

list(dic['c'])

from statistics import mean
mean(list(dic.values()))

"""##Accumulate and Reduce"""

# importing itertools for accumulate()
import itertools

# importing functools for reduce()
import functools

lis = [1, 3, 4, 10, 4]

# printing summation using accumulate()
print("The summation of list using accumulate is :", end="")
print(list(itertools.accumulate(lis, lambda x, y: x+y)))

# printing summation using reduce()
print("The summation of list using reduce is :", end="")
print(functools.reduce(lambda x, y: x+y, lis))

"""##Dictionary mean"""

from statistics import mean
n = int(input())
student_marks = {}
for _ in range(n):
    name, *line = input().split()
    scores = list(map(float, line))
    student_marks[name] = scores
query_name = input()
m = float(mean(list(student_marks[query_name])))
print('%.2f' % m)

del arr

n = int(input())
arr = list(map(int, input().split()))
maxi = max(arr)
s = min(arr)
for i in arr:
    if i > maxi:
        s = maxi
        maxi = i
    elif s < i and i < maxi:
        s = i

print(s)

z = {'and': 'close', 'break': 'react'}
z['close']

z['and']

d= []
d[1] = 1
d

d= []
d.insert(2,0)
d

d.append(1)
d

d.append(1)
d

d.insert(2,0)

d

"""##Comands on Lists"""

N = int(input())
l = list()
for it in range(N):
    cmd = input().split()
    if cmd[0] == 'print':
        print(l)
    elif cmd[0] == 'append':
        l.append(int(cmd[1]))
    elif cmd[0] == 'sort':
        l.sort()
    elif cmd[0] == 'remove':
        l.remove(int(cmd[1]))
    elif cmd[0] == 'pop':
        l.pop()
    elif cmd[0] == 'reverse':
        l = l[::-1]
    elif cmd[0] == 'insert':
        l.insert(int(cmd[1]),int(cmd[2]))

N = int(input())
arr=[]
cmds=[input() for _ in range(N)]
for c in cmds:
    cc=c.split()
    l=len(cc)
    a="arr."
    if cc[0]=="print":  print(arr)
    else:
        if l==1:  eval(a+cc[0]+"()")
        if l==2:  eval(a+cc[0]+"("+cc[1]+")")
        if l==3:  eval(a+cc[0]+"("+cc[1]+","+cc[2]+")")

it = map(int, input().split())
    type(it)

j = input().split()
print(type(j), j)

"""##Swapcase function"""

def sc(s):
  l=list()
  for i in s:
    if i.isalpha():
      if i.isupper():
        l.append(i.lower())
      elif i.islower():
        l.append(i.upper())
    else:
      l.append(i)
  return l

e = 'AsdFgh 2'
sc(e)

def swcs(s):
  l=list()
  for i in s:
    if i.isalpha():
      if i.isupper():
        l.append(i.lower())
      elif i.islower():
        l.append(i.upper())
    else:
      l.append(i)
  x = "".join(l)
  return x

q = 'StrIng 2E'
swcs(q)

def f(a, b):
  x = a +' '+ b
  return x

f('Aditya', 'B')

def fn(first, last):
    # Write your code here
    first = str(first)
    last = str(last)
    x = 'Hello '+first+' '+last+'! You just delved into python'
    return x

fn('a', 'b')

def print_full_name(first, last):
    # Write your code here
    x = 'Hello '+first+' '+last+'! You just delved into python'
    return x

first_name = input()
last_name = input()
print_full_name(first_name, last_name)

def print_full_name(first, last):
    # Write your code here
    print('Hello '+ first +' '+ last +'! You just delved into python.')

first_name = input()
last_name = input()
print_full_name(first_name, last_name)

p = 'abcd'
v=p.replace('d','e')
v

v.replace('a', 'A')

A = 'ABCDCDC'
A.count('CDC')

S = 'ABCDCDC'
s = 'CDC'
l = 0
m = 3
c = 0
for i in range(len(s)+2):
  print(l, m)
  print(m <= (len(S)+1))
  if m <= (len(S)+1):
    if s == S[l:m]:
      print(s == S[l:m])
      c = c+1
  l = l+1
  m = m+1

print(c)

S = 'ABCDCDC'
s = 'CDC'
l = 0
m = len(s)
c = 0
while m <= (len(S)+1):
  print(l, m)
  print(m <= (len(S)+1))
  if s == S[l:m]:
      print(s == S[l:m])
      c = c+1
  l = l+1
  m = m+1

print(c)

def fun(variable):
    letters = ['a', 'e', 'i', 'o', 'u']
    if (variable in letters):
        return True
    else:
        return False

sequence = ['g', 'e', 'e', 'j', 'k', 's', 'p', 'r']
filtered = map(fun, sequence)
list(filtered)

sequence = ['g', 'e', 'e', 'j', 'k', 's', 'p', 'r', '1', '6']
filtered = map(lambda a: a.isalnum(), sequence)
list(filtered)

sequence = ['g', 'e', 'e', 'j', 'k', 's', 'p', 'r', '1', '6']
filtered = map(lambda a: a.isalpha(), sequence)
list(filtered)

"""##String containing type of collections using Line comprehensions"""

s = 'qA2'
al = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
c = [True if True in list(map(lambda a: a in al[0:al.index(a)], s)) else False]
print(c)

s = 'qA2'
s.split('')

s = 'qA2'
al = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
l = [i in al for i in s]
l

s = '#$%@^&*'
al = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
num = '0123456789'
z = [True if True in list(i.isalnum() for i in s) else False]
if True in z: print('True')
else: print('False')
a = [True if True in list(i in al for i in s) else False]
if True in a: print('True')
else: print('False')
b = [True if True in list(i in num for i in s) else False]
if True in b: print('True')
else: print('False')
c = [True if True in list(i in al[0:al.index('a')] for i in s) else False]
if True in c: print('True')
else: print('False')
d = [True if True in list(i in al[al.index('a'):len(al)] for i in s) else False]
if True in d: print('True')
else: print('False')

s = 'qA2'
al = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
num = '0123456789'
if s.isalnum():
    print(True)
else:
    print(False)
a = [True if True in list(i in al for i in s) else False]

"""##Text alignment forming desired o/p"""

w = 10
for i in range(w):
  if i%2 != 0:
    print(('l'*(i)).center(w,'-'))

thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))

for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))

N, M = map(int, input().split())
cen = int(N/2)
if M == 3*N and N%2 != 0:
    for i in range(N):
        if i == cen:
            print('WELCOME'.center(M,'-'))
        elif i < cen:
            print((i*'.|.').rjust(int(M/2)-1,'-')+'.|.'+(i*'.|.').ljust(int(M/2)-1,'-'))
        elif i > cen:
            print(((N-i-1)*'.|.').rjust(int(M/2)-1,'-')+'.|.'+((N-i-1)*'.|.').ljust(int(M/2)-1,'-'))

thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))

#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))

"""##String formatting"""

d = 'askjdfhakgfhsjk'
w = 4
print(d[:4])
print(d[4:8])
print(d[8:12])
print(d[12:15])
print(len(d))

round(len(d)/w)

def wr(wi, str):
  l = len(str)
  ini = 0
  la = wi
  if l%wi != 0:
    x = int(l/wi)+1
  for i in range(x):
    if la <= l:
      print(str[ini:la])
      ini = ini+wi
      la = la+wi
    elif ini >= l-1:
      ini = l-1
      la = l
      print(str[ini:la])
    elif ini < l-1 and la > l:
      la = l
      print(str[ini:la])
  return

wr(4,'kdtghjglhklgj')

wr(4,'kgddss')

"""##File Handling"""

# Commented out IPython magic to ensure Python compatibility.
# %ls

pwd()

f=open('py.txt','w+')
data = '''This is created through python coding using google colab.
You can do this using the file functions available in python library.
And the text appeared here by using the file method '.write()'.'''
f.write(data)

f.seek(0)
f.read()

!ls

f.seek(0)
f.readlines()

f.close()

try:
  a = int(input())
  b = int(input())
  c=a/b
  f.open('error.txt')
  f.write(c)
except Exception as e:
  print('File does not exit - ',e)

with open('File_Name.txt'):
  #program for operation
  pass

"""##Generator"""

def ar(n):
  for i in range(n):
    yield (i+4)**(-1)

g = ar(2)

print(list(g))

next(g)

for i in g:
  print(i)

"""##Logging"""

import logging

logging.basicConfig(level=logging.INFO)

a = 5
b = 3
add = a+b
logging.debug(add)
sub = a-b
logging.info(sub)
mul = a*b
logging.warning(mul)
div = a/b
logging.error(div)
pov = a**b
logging.critical(pov)

#StreamHandler is same (logs are shown in the console itself)
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

f = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

fh = logging.FileHandler('file_name.log')
fh.setFormatter(f)

logger.addHandler(fh)

logger.debug('Debugging starts')

"""##Class - OOPS concept"""

class robot:
  def __init__(self, name, color, gender):
    self.name = name
    self.color = color
    self.gender = gender

  def self_d(self):
    print(f'My name is {self.name}')
    return

class circle:

  def __init__(O, radius):
    O.radius = radius

  def area_O(O):
    print('Area = ',(22/7)*(O.radius**2))
    return

  def circum_O(O):
    print('Circumference = ',2*(22/7)*O.radius)
    return

c1 = circle(7)

c1.area_O()

c1.circum_O()

"""###Name Mangling for Proctected and Private data - Encapsulation"""

class test:
  def __init__(self, name, color, gender):
    self.name = name
    self._color = color
    self.__gender = gender

  def self_d(self):
    print(f'My name is {self.name}')
    return

t1 = test('a','red','F')

dir(t1)

class tst:
  def __str__(a):
    return 'This is just an object'

  def fn(a):
    print('This returns',a.method)

c = tst()

print(c)

c.method = 'an attribute/property'

c.fn()

"""###Inheritance
- Single
- Multiple
- Multi-level
- Hierarchical
- Hybrid
- Polymorphism
"""

#Multiple inheritance

class Person:

  def __init__(a,name,age):
    a.name = name
    a.age = age

  def s_details(a):
    print(a.name,a.age)

class Company:

  comp_name = 'XYZ'

  def comp(a):
    print(a.comp_name)

class Employee(Person, Company):

  def emp_pos(a):
    print('I am working at',a.comp_name,'as',a.pos)

p = Employee('Aditya',25)

p.pos = 'unemployed'

p.s_details()

p.emp_pos()

print("."*10)
for i in range(5):
    print("." + " "*8 + ".")
print("."*10)

def Print(a):
    return a

l = "Hello Ad"
Print(l)

Print(12)

Print(3+5)

a=1
b=3
Print(a+b)

s = 'as'
print(type(s)==str)

a = 5
b = 6
d = 8

id(a)

a = 5+b
id(a)

b = 6 - 1
id(b)

classs = (input("Is there a class today: "))
if not classs:
    print("Yes")
print(classs)
print(not classs)

a = 1.0
b = 1 + 0j
print(a, b)
print(a is b)
print(a == b)

num = int(input("Number is: "))
l = []
for i in range(num+1):
    if i != 0:
        if num%i == 0:
            l.append(i)

print(f"The number factors for number {num} = {l}")

a = "aditya"
a[-6:-1]

a[-6:6]

N=8
M=4*N
for i in range(N):
    if i < int(N/2):
        print((i*'.|.').rjust(int(M/2)-1,'-')+'.|.'+(i*'.|.').ljust(int(M/2)-1,'-'))

N=8
M=4*N
for i in range(N):
    if i < int(N/2):
        print((i*'.|.').rjust(int(M/2),'-')+'.|.'+(i*'.|.').ljust(int(M/2),'-'))

for i in range(10):
    if i>5:
        break
    print(i)

for i in range(10):
    if i<=5:
        continue
    print(i)

a = [1,2,3,4,5,6]
b = [i**2 for i in a if i%2!=0]
print(b)

a = [1,2,3,4,5,6]
a.pop(2)
a

v = [3,31,4,4,3,1,344,35,5311,13,131,44,4,4,444,4,44,14,55,33,1]

q =set(v)
print(q)

print(set(q))

list(q).sort(reverse=True)
print(list(q))

n = int(input().strip())

n

n = (input().split())

n

n = '1'
l = [1, 2, 3, 4]
l.insert(int(n), 3)

l

for i in range(0, 10, 4):
    print(i)

string = "ABCDEFGHIJKLIMNOQRSTUVWXYZ"
max_width = 4
if len(string) > max_width:
    for i in range(0, len(string), max_width):
        print(i)
        print(string[i:i+max_width])

l = ['1','2','3','4','5']
"\n".join(l)

print("sdjk\n","adsa")

def list_sum(a):
    sum = 0
    for i in a:
        if type(i)==int:
            sum = sum + i
    return sum

a = '1'
a.isnumeric()

def l_str(s):
    a = 0
    for i in s:
        a = a+1
    return a

w = 'asiernv'
l_str(w)

def ind(l,e):
    a = 0
    for i in l:
        if i == e:
            return a
        else:
            a = a + 1

l = ['1','2','3','4','5']
ind(l,'3')

ind(l,'5')

l_str(l)

L = []
for _ in range(int(input())):
    l =[]
    name = input()
    score = float(input())
    l.append(name)
    l.append(score)
    L.append(l)
print(L)

a = 1
b = 4
c = 3
min(a,b,c)

max(a,b,c)

l = [1, 2, 3, 4]
max(l)

l = ['aditya', 'chaitanya', 'laskshmi', 'tommy', 'jolly']
max(l)

min(l)

l = ['aditya', 'chaitanya', 'laskshmi', 'tommy', 'jolly']
l.sort()
l

S = [0, 1, 8, 3, 5, 2, 3, 4.5, 4.3, 4.5, 6]
s = 0
mm = min(S)
for i in S:
    if i > mm:
        s = mm
        mm = i
    elif i < mm and i > s:
        s = i
print(s)

S = [1, 3, 5, 3, 4.5, 4.3, 4.5, 6]
s = 0
mi = max(S)
for j in S:
    if j < mi:
        s = mi
        mi = j
    elif j > mi and j < s:
        s = j

print(s)

s = list()
n = list()
l = list()
s1 = list()
for _ in range(int(input())):
    name = input()
    score = float(input())
    n.append(name)
    s.append(score)
for i in s:
    if i == min(s):
        continue
    s1.append(i)
m = min(s1)
for i in range(len(n)):
    if s[i] == m:
        l.append(n[i])
l.sort()
for k in l:
    print(k)

